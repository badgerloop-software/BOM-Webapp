<h1>Make {{type}}</h1>
<br><br>
<form id="makeForm" action="{{post}}" method="POST">
  <h3>{{type}} Details</h3>
  <div id="orderDetails">
    <p>
      <label>Requestor</label>
      <input class="form-control" name="requestor" type="text" value="{{user.name}}" readonly>
    </p>
    <p>
      <label>Subteam</label>
      <select class="form-control custom-select" name="subteam" id="subteamDropdown" required>
        {{!-- {{> teamsDropdown}} --}}
      </select>
    </p>
    <p>
      <label>Supplier</label>
      <input class="form-control" id="supplier" name="supplier" type="text" required>
    </p>
  </div>
  <hr />
  <h3 id="itemsTitle">Items</h3>
  <div id="orderItems">
    {{#if isReimbursement}}
    <div id="reimbursementButtons">
      <button type="button" onclick="setupGeneric()" class="btn btn-sm btn-primary">Generic Reimbursement</button>
      <button type="button" onclick="setupItemized()" class="btn btn-sm btn-primary">Itemized Reimbursement</button>
    </div>

    <div id="reimbursementDetails">
      <p>
        <label>Reimbursement Title</label>
        <input class="form-control" name="title" type="text" required>
      </p>
      <p>
        <label for="">Total Cost</label>
        <input class="form-control" name="totalCost" type="number" min="0" step="0.01" required>
      </p>
      <button type="button" onclick="showOptions()" class="btn btn-sm btn-danger">Undo</button>
    </div>
    {{/if}}
    <div id="item1" class="ItemDetails">
      <p>
        <label>Item Name</label>
        <input class="form-control" id="item1Name" name="item1Name" type="text" required>
      </p>
      <p>
        <label>Product Number</label>
        <input class="form-control" id="item1ProductNum" name="item1ProductNum" type="text">
      </p>
      <p>
        <label>Price</label>
        <input class="form-control" id="item1Price" name="item1Price" type="number" min="0" step="0.01" required>
      </p>
      <p>
        <label>Quantity</label>
        <input class="form-control" id="item1Quantity" name="item1Quantity" type="number" min="1" step="1" required>
      </p>
      <p>
        <label>Project</label>
        <input class="form-control" id="item1Project" name="item1Project" type="text">
      </p>
      <p id="editButtons">
        <span id="addButton" type="button" onclick="addItem()" class="SquareButton btn-success">+</span>
        <span id="remButton" type="button" onclick="removeItem()" class="SquareButton btn-danger">-</span>
        {{#if isReimbursement}}
        <span id="undoButton" onClick="showOptions()" class="SquareButton btn-warning">Undo</span>
        {{/if}}
      </p>
    </div>
  </div>
  <hr />
  <h3>Finalize</h3>
  <div id="finalDetails">
    {{#if isRequest}}
    <p>
      <label>Shipping</label>
      <input class="form-control" type="number" step="0.01" min="0" name="shipping" {{#if isReimbursement}} value="0"
        readonly {{/if}}>
    </p>
    {{/if}}
    <p>
      <label>Tax</label>
      <input class="form-control" type="number" step="0.01" min="0" name="tax" id="tax">
    </p>
    <p>
      <label for="podCost">Counts toward pod cost?</label>
      <input type="checkbox" name="podCost">
    </p>
    {{#if isRequest}}
    <p>
      <label for="link">Link to Purchase</label>
      <input class="form-control" type="text" name="link" id="link">
    </p>
    {{/if}}
    {{#if isReimbursement}}
    <p>
      <label>Project</label>
      <input class="form-control" id="item1Project" name="item1Project" type="text">
    </p>
    <p>
      <label for="link">Link to Invoice</label>
      <input class="form-control" type="text" name="link" id="link">
    </p>
    {{/if}}
    {{#if isRequest}}
    <p>
      <label for="date">Needed By:</label>
      <input class="form-control" type="date" name="date" id="date">
    </p>
    {{/if}}
  </div>
  <p class="full-width">
    <label for="comments">Comments:</label>
    <textarea name="comments" id="comments" cols="30" rows="4"></textarea>
  </p>
  <hr />
  <p>
    <label style="display:inline" for="confirm">I have double checked that I need this item and all information is
      correct (required)</label>
    <input style="width:auto" type="checkbox" name="confirm" required>
    <br>
  </p>
  <br><br>
  {{!-- Supplemental Data to be posted but not for user input --}}
  <input type="number" style="display: none;" id="numItems" name="numItems" value="1">
  <input type="text" style="display: none;" name="type" value="{{type}}">
  {{!-- End Supplemental Post Data --}}
  <p>
    <button class="btn btn-lg btn-success" type="submit">Submit Order</button>
  </p>
</form>

<script>
  {{#if isReimbursement}}
  // Reimbursement ONLY logic
  let reimbursementDetailsTemplate = document.querySelector('#reimbursementDetails').cloneNode(true); // Ew Global Vars but :shrug:
  let itemDetailsTemplate = document.querySelector('#item1').cloneNode(true);
  {{/if}}
  function addItem() {
    let template = document.querySelector('#item' + getNumItems());
    let buttons = document.querySelector("#editButtons");
    let clone = template.cloneNode(true);
    incrementNumItems()
    clone.id = 'item' + getNumItems();
    setBoxNames(clone, getNumItems())
    template.removeChild(buttons);
    template.after(clone);
  }

  function removeItem() {
    if (getNumItems() === 1) return;
    let lastItem = document.querySelector('#item' + getNumItems());
    decrementNumItems()
    let secondLastItem = document.querySelector('#item' + getNumItems());
    let buttons = document.querySelector("#editButtons");
    secondLastItem.appendChild(buttons);
    lastItem.parentNode.removeChild(lastItem);
  }

  function incrementNumItems() {
    document.querySelector('#numItems').value++;
  }

  function decrementNumItems() {
    document.querySelector('#numItems').value--;
  }

  function getNumItems() {
    return Number(document.querySelector('#numItems').value)
  }

  function setBoxNames(elem, number) {
    let children = elem.children
    for (let i = 0; i < children.length; i++) {
      let old = String(children[i].innerHTML);
      let re = new RegExp('item' + String(number - 1), "g"); // Must use regex to replace all instances
      let newContent = old.replace(re, "item" + number);
      children[i].innerHTML = newContent
    }
  }
  {{#if isReimbursement}}
  // Reimbursement ONLY Logic
  function setupGeneric() {
    hideButtons();
    document.querySelector('#itemsTitle').innerText = 'Cost'
    let reimbursementDetails = reimbursementDetailsTemplate.cloneNode(true);
    document.querySelector('#orderItems').appendChild(reimbursementDetails);
    reimbursementDetails.style.display = 'grid';
    disableTaxBox()
    document.querySelector('#numItems').value = 0;
  }

  function showOptions() {
    showButtons();
    document.querySelector('#itemsTitle').innerText = 'Select Reimbursement Type'
    let reimbursementDetails = document.querySelector('#reimbursementDetails');
    let itemBox = document.querySelector('#item1');
    if (reimbursementDetails) { // If there are generic details
      reimbursementDetailsTemplate = reimbursementDetails.cloneNode(true);
      reimbursementDetails.parentNode.removeChild(reimbursementDetails);
    }
    if (itemBox) { //If there are item details
      if (getNumItems() > 0) {
        while (getNumItems() > 1) {
          removeItem();
        }

        itemDetailsTemplate = itemBox.cloneNode(true)
        itemBox.parentNode.removeChild(itemBox);
      }

    }
  }

    function enableTaxBox() {
      let taxBox = document.querySelector('#tax');
      taxBox.readOnly = false
      taxBox.setAttribute('type', 'number');
      taxBox.setAttribute('value', ' ');
    }

    function disableTaxBox() {
      let taxBox = document.querySelector('#tax');
      taxBox.setAttribute('type', 'text');
      taxBox.setAttribute('value', 'N/A');
      taxBox.readOnly = true
    }

    function showButtons() {
      let buttons = document.querySelector('#reimbursementButtons');
      buttons.style.display = 'block';
    }

    function hideButtons() {
      let buttons = document.querySelector('#reimbursementButtons');
      buttons.style.display = 'none';
    }

    function setupItemized() {
      document.querySelector('#itemsTitle').innerText = 'Items'
      hideButtons()
      let itemDetails = itemDetailsTemplate.cloneNode(true);
      document.querySelector('#orderItems').appendChild(itemDetails);
      itemDetails.style.display = 'grid';

      document.querySelector('#numItems').value = 1
      enableTaxBox();
    }

    // Init showing options
    showOptions()
    {{/if}}
</script>
<script>
        const DROPDOWN = document.getElementById('subteamDropdown');
        const TEAMS_LIST_STRING = "{{teamList}}";
        const TEAMS_LIST = TEAMS_LIST_STRING.split(',');
        TEAMS_LIST.forEach((team) => {
          let option = document.createElement('option');
          option.id = String(team);
          option.name = String(team);
          option.innerHTML = String(team);
          DROPDOWN.appendChild(option);
        });
</script>

<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.13.5/xlsx.full.min.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.13.5/jszip.js"></script>
<script type="text/javascript">
        function Upload() {
          //Reference the FileUpload element.
          var fileUpload = document.getElementById("fileInput");

          //Validate whether File is valid Excel file.
          var regex = /^([a-zA-Z0-9\s_\\.\-:])+(.xls|.xlsx)$/;
          if (regex.test(fileUpload.value.toLowerCase())) {
            if (typeof (FileReader) != "undefined") {
              var reader = new FileReader();

              //For Browsers other than IE.
              if (reader.readAsBinaryString) {
                reader.onload = function (e) {
                  ProcessExcel(e.target.result);
                };
                reader.readAsBinaryString(fileUpload.files[0]);
              } else {
                //For IE Browser.
                reader.onload = function (e) {
                  var data = "";
                  var bytes = new Uint8Array(e.target.result);
                  for (var i = 0; i < bytes.byteLength; i++) {
                    data += String.fromCharCode(bytes[i]);
                  }
                  ProcessExcel(data);
                };
                reader.readAsArrayBuffer(fileUpload.files[0]);
              }
            } else {
              alert("This browser does not support HTML5.");
            }
          } else {
            alert("Please upload a valid Excel file.");
          }
        };
        function ProcessExcel(data) {
          console.log('processing')
          //Read the Excel File data.
          var workbook = XLSX.read(data, {
            type: 'binary'
          });

          console.log(workbook);
          let sheet = workbook.SheetNames[0];
          let rows = XLSX.utils.sheet_to_row_object_array(workbook.Sheets[sheet]);
          console.log(rows);
          const NUM_ROWS = rows.length

          function getListOfPartNames() {
            let output = []; // Empty part list
            for (let i = 0; i < NUM_ROWS; i++) {
              output[i] = rows[i].Description;
            }
            return output.toString();
          }

          function getListOfProductNums() {
            let output = [];
            for (let i = 0; i < NUM_ROWS; i++) {
              output[i] = rows[i]["Manufacturer Part Number"];
            }
            return output.toString();
          }

          function getListOfQuantities() {
            let output = [];
            for (let i = 0; i < NUM_ROWS; i++) {
              output[i] = rows[i].Quantity;
            }
            return output.toString();
          }

          function getRowCost(rowIndex) {
            let price = Number(rows[rowIndex]["Unit Price"]);
            let quantity = Number(rows[rowIndex].Quantity);
            console.log(`${price} * ${quantity}`)
            return price * quantity;
          }

          function getListOfCosts() {
            let output = [];
            for (let i = 0; i < NUM_ROWS; i++) {
              output[i] = rows[i]["Unit Price"];
            }
            return output.toString();
          }

          function getTotalCost() {
            let output = 0;
            for (let i = 0; i < NUM_ROWS; i++) {
              output += getRowCost(i);
              console.log(output)
            }
            return output.toString();
          }

          function getListOfManPartNums() {
            let output = [];
            for (let i = 0; i < NUM_ROWS; i++) {
              output[i] = rows[i]["Manufacturer Part Number"];
            }
            return output.toString();
          }

          function fillComments() {
            let output = "";
            output += "Manufacturer Part Numbers: ";
            output += getListOfManPartNums();
            output += '\n';

            return output.toString();
          }
          console.log(getListOfPartNames());
          document.getElementById('item').value = `${getListOfPartNames()}`;
          document.getElementById('productNum').value = getListOfProductNums();
          document.getElementById('quantity').setAttribute('type', 'text');
          document.getElementById('quantity').value = getListOfQuantities();
          document.getElementById('cost').setAttribute('type', 'text');
          document.getElementById('cost').value = getListOfCosts();
          document.getElementById('supplier').value = "Digikey";
          document.getElementById('comments').value = fillComments();
          let isDigikeyOrder = document.createElement('input');
          isDigikeyOrder.name = 'isDigikeyOrder';
          isDigikeyOrder.style.display = 'none';
          isDigikeyOrder.value = getTotalCost();
          document.getElementById('makeForm').appendChild(isDigikeyOrder);
        };
</script>